1. Nhập x và p, tính x^p
#include <iostream>
#include <algorithm>

using namespace std;

int dequy(int n, int p)
{
	if(p == 1) return n;
	
	return n*dequy(n,p-1);
}

int main()
{
	int x, p;
	cout << "Nhap lan luot so x va p: ";
	cin >> x >> p;
	
	cout << dequy(x,p);
	
	return 0;
}
----------------------------------------------------
2.Tính S(n) = 1 + (1+2) + (1+2+3)+…+(1+2+3+…+n) (n<10^6)
* Cong thuc tinh S 1 cum: (n*(n+1))/2

#include <iostream>
#include <algorithm>

using namespace std;

int dequy(int n, int &s)
{
	if(n == 0){
		return 0;
	}
	
	int x = n+dequy(n-1,s);
	s = s + x;
	
	return x;
}
    
int main()
{
	int n;
	cout << "Nhap n: ";
	cin >> n;
	
	int s = 0;
	dequy(n,s);
	cout << s;
	
	return 0;
}
--------------------------------------------------
3. Tính S(n) = 1 + 1/(1+2) + 1/(1+2+3) + .....+ 1/(1+2+3+...+n)

#include <iostream>
#include <iomanip>

using namespace std;

double dequy(int n, double &s)
{
    if(n==0) return 0;
    
    double x = n+dequy(n-1,s);
    
    s = s + 1/x;
    
    return x;
}

int main()
{
    int n;
    cout << "Nhap n: ";
    cin >> n;
    
    double s = 0;
    dequy(n,s);
    
    cout << setprecision(4) << fixed << s;

    return 0;
}

-----------------------------------------------------------------------
4. Tính S(n) = 1 + (1x2) + (1x2x3)+…+(1x2x3x…xn)

#include <iostream>

using namespace std;

long long dequy(int n, long long &s)
{
    if(n==0) return 1;
    
    int x = n*dequy(n-1,s);
    s = s+x;
    
    return x;
}

int main()
{
    int n; 
    cout << "Nhap n: ";
    cin >> n;
    
    long long s = 0;
    dequy(n,s);
    
    cout << s;
    return 0;
}

-------------------------------------------------------
5. Tính S(n) = 1 + 1/2! + 1/3! + .....+ 1/n!

#include <iostream>
#include <iomanip>

using namespace std;

double tinhtong(int n, double& s)
{
    if(n==1) return 1;
    
    double x = n*tinhtong(n-1,s);
    
    s = s+1/x;
    
    return x;
}

int main()
{
    int n;
    cout << "Nhap n: ";
    cin >> n;
    
    double s = 1;
    tinhtong(n,s);
    
    cout << setprecision(3) << fixed << s;
    
    return 0;
}
---------------------------------------------------------
6. Tính S(n) = 1 + x/1! + x^2/2! + x^3/3! + .....+ x^n/n!

#include <iostream>
#include <iomanip>
#include <algorithm>

using namespace std;

double tinhtong(int n, double x, double &s)
{
    if(n == 0) return 1;
    
    double a = (x/n)*tinhtong(n-1,x,s);;
    s = s + a;
    
    return a;
}

int main()
{
    int n;
    double x;
    cout << "Nhap n, x: ";
    cin >> n >> x;
    
    double s = 1;
    tinhtong(n,x,s);
    cout << setprecision(2) << fixed << s;
    
    return 0;
}
----------------------------------------------------
7. Tính giá trị phần tử thứ n của dãy Fibonacci (không dùng mảng)
#include <iostream>
#include <vector>

using namespace std;

long long fibo(int n, vector<int> &memo)
{
    if(memo[n] != -1)
        return memo[n];
        
    memo[n] = fibo(n-1,memo) + fibo(n-2,memo);
    
    return memo[n];
}

int main()
{
    int n;
    cout << "Nhap so n: ";
    cin >> n;
    
    vector<int> memo(n+1,-1);
    memo[1] = 1;
    memo[2] = 1;
    cout << fibo(n,memo);
    
    return 0;
}
--------------------------------------------------
8. Nhập số thực A (0<A<4), tìm n nhỏ nhất thỏa
	1+1/2+1/3+....+1/n > A
#include <iostream>

using namespace std;

void findmin(double A, double &s, double &n)
{
    if(s > A)
    {
        return;
    }
    
    s = s + 1/n;
    
    if(s > A)
    {
        return;
    }else n++;
    
    findmin(A,s,n);

}

int main()
{
    
    double A;
    cout << "Nhap so A: ";
    cin >> A;
    
    double s = 0;
    double n = 1;
    findmin(A,s,n);
    
    cout << n;

    return 0;
}
---------------------------------------------
9. Nhập vào một mảng các số nguyên.
a/ Xếp lại mảng đó theo thứ tự giảm dần.
b/ Nhập vào một số nguyên từ bàn phím. Chèn số đó vào mảng sao cho mảng vẫn có thứ tự giảm dần. (không được xếp lại mảng)

#include <iostream>

using namespace std;

void inmang(int a[100], int n)
{
    for(int i = 0; i < n; i++)
        cout << a[i] << " ";
}

void merge(int a[100], int left, int mid, int right)
{
    int s1 = mid - left + 1;
    int s2 = right - mid;
    
    int k = left;
    int arr1[100];
    int arr2[100];
    
    //cap nhat 2 mang arr1 va arr2 luu du lieu
    for(int i = 0; i < s1; i++)
        arr1[i] = a[left+i];
        
    for(int i = 0; i < s2; i++)
        arr2[i] = a[mid+1+i];
        
    int p1 = 0; 
    int p2 = 0;
    
    while ( p1 < s1 && p2 < s2 )
    {
        if(arr1[p1] < arr2[p2])
        {
            a[k++] = arr1[p1];
            p1++;
        }else {
            a[k++] = arr2[p2];
            p2++;
        }
    }
    
    while(p1<s1)
    {
        a[k++] = arr1[p1];
            p1++;
    }
    
    while(p2<s2)
    {
        a[k++] = arr2[p2];
            p2++;
    }
}

void mergeSort(int a[100], int left, int right)
{
    if(left < right)
    {
        int mid = left + (right-left)/2;
        mergeSort(a,left,mid);
        mergeSort(a,mid+1,right);
        
        merge(a,left,mid,right);
    }
}

void chenmang(int a[100], int &n, int val)
{
    if(val > a[n-1])
    {
        a[n] = val;
        n++;
    }
    
    int pos;
    for(int i = 0; i < n; i++)
        if(a[i] >= val)
        {
            pos = i;
            break;
        }
    
    for(int i = n - 1; i >= pos; i--)
    {
        a[i+1] = a[i];
    }
    
    a[pos] = val;
    n++;
}

int main()
{
    int n;
    cout << "Nhap so luong phan tu cua mang: ";
    cin >> n;
    
    cout << "Nhap gia tri cua tung phan tu trong mang: ";
    int a[100];
    for(int i = 0; i < n; i++)
        cin >> a[i];
        
    mergeSort(a,0,n-1);
    cout << "Nhap gia tri muon chen: ";
    int val; cin >> val;
    chenmang(a,n,val);
    inmang(a,n);
    
    return 0;
}
-----------------------------------------------------
10. (Phân loại ký tự) Cho một chuỗi ký tự, hãy phân loại mỗi ký tự theo 4 kiểu sau: kiểu chữ thường, kiểu chữ hoa, chữ số và kiểu “khác” (tức là các ký tự không thuộc ba loại trên)

#include <iostream>

using namespace std;

//phan loai chuoi ki tu 
//1: chu thuong
//2: chu hoa 
//3: chu so 
//4: kieu khac

void phanloai(string s, int a[1000]);

void inmang(int a[1000], int n)
{
    for(int i = 0; i < n; i++)
    {
        if(a[i] == 1)
            cout << "Ki tu thu " << i << " la chu thuong.\n";
        if(a[i] == 2)
            cout << "Ki tu thu " << i << " la chu hoa.\n";
        if(a[i] == 3)
            cout << "Ki tu thu " << i << " la chu so.\n";
        if(a[i] == 4)
            cout << "Ki tu thu " << i << " la kieu khac.\n";
    }
}

int main()
{
    string s;
    getline(cin,s);
    
    int a[1000];
    
    phanloai(s,a);
    
    inmang(a,s.size());
    
    return 0;
}

void phanloai(string s, int a[1000])
{
    int n = s.size();
    
    int ind = 0;
    
    for(int i = 0; i < n; i++)
    {
        if(islower(s[i])) a[ind++]=1;
        else if(isupper(s[i])) a[ind++]=2;
        else if(isdigit(s[i])) a[ind++]=3;
        else a[ind++] = 4;
    }
}
--------------------------------------------------------
11. Viết chương trình thực hiện phép nhân 2 số nguyên lớn (từ 50-100 chữ số)

----------------------------------------------------
12. Tính S(n) = 1 + (1+2) + (1+2+3)+…+(1+2+3+…+n) (n<10^10)

//quy hoach dong
#include <iostream>
#include <vector>

using namespace std;

int dynamic_p(int n, vector<int>& dp);

int main()
{
    int n;
    cout << "Nhap n: ";
    cin >> n;
    
    vector<int> dp(n+1,-1);
    
    dp[1] = 1;
    
    cout << dynamic_p(n,dp);
    
    return 0;
}

int dynamic_p(int n, vector<int>& dp)
{
    if(dp[n] != -1)
        return dp[n];
        
    dynamic_p(n-1,dp);
    dp[n] = dp[n-1] + (n*(n+1))/2;
    
    return dp[n];
}
---------------------------------------------------------
13. Viết chương trình sắp xếp tăng một mảng có n phần tử chỉ gồm các số 1,2 và 3 sao cho thực hiện ít phép hoán vị nhất.

#include <iostream>
#include <vector>

using namespace std;

void sapxep(int a[100], int n, vector<int> &dp);

int main()
{
    int n;
    int a[100];
    
    cout << "Nhap n: ";
    cin >> n;
    
    for(int i = 0; i < n; i++)
        cin >> a[i];
    
    vector<int> dp(4,0);
    sapxep(a,n,dp);
    
    for(int i = 1; i < 4; i++)
    {
        for(int j = 0; j < dp[i]; j++)
            cout << i << " ";
    }
    
    return 0;
}

void sapxep(int a[100], int n, vector<int> &dp)
{
    for(int i = 0; i < n; i++)
    {
        dp[a[i]]++;
    }
}
------------------------------------------------------
14. Tính S = A0 + A1x + A2x^2 + … + Anx^n
Hướng dẫn: Chương trình dưới đây dùng 2n phép tính nhân

S = A[0];
xi=1;

for (int i=1; i<=N;i++)
{
	xi = xi*x;
	S = S + A[i]*xi;
}
Liệu có cách viết nào tốt hơn (chạy nhanh hơn) không?

* Độ phức tạp: O(n)
****
S = A[n];
for (int i = n-1; i >= 0; i--)
{
	S = S*x + A[i];
}

-----------------------------------------------------------
15. Biết giai thừa của n, kí hiệu: n! = 1 x 2 x 3 x … x n. Cho một số nguyên dương n.
Hãy cho biết giai thừa của n có bao nhiêu chữ số ‘0’ ở bên phải.
Ví dụ: 5! = 1 x 2 x 3 x 4 x 5 = 120 có 1 chữ số ‘0’ ở bên phải.


#include <iostream>

using namespace std;

//Cách 1: Tính giai thừa xong 
//        Rồi chia cho 10 đến khi không chia hết
//trả về số lần chia cho 10 = số chữ số 0 

long long fac(int n)
{
    if ( n == 1) return 1;
    
    return n*fac(n-1);
}

int count(int n)
{
    long long t = fac(n);
    int c = 0;
    
    while(t%10 == 0)
    {
        t=t/10;
        c++;
    }
    
    return c;
}

//Cách 2: Công thức để đếm số lần chia hết cho 5 trong phạm vi từ 1 đến n là:
//              count = n/5 + n/25 + n/125 + ...

int countTrailingZeros(int n) {
    int count = 0;
    for (int i = 5; n / i >= 1; i *= 5) {
        count += n / i;
    }
    return count;
}

int main()
{
    int n;
    cout << "Nhap so n: ";
    cin >> n;
    
    cout << count(n);
    
    return 0;

    return 0;
}
---------------------------------------------------------
16. Cho một chuỗi S chỉ gồm các ký tự < và > có chiều dài n (n<=1000). 
Yêu cầu: Hãy chèn n+1 số nguyên dương vào sao cho ta có bất đẳng thức đúng sao cho số nguyên lớn nhất Tmax trong n+1 số này là nhỏ nhất. Viết chương trình nhập vào chuỗi S và xuất ra Tmax như trên. Ví dụ: S = ><>< sẽ cho ra bất đẳng thức đúng như sau:
	2>1<2>1<2. Vậy Tmax=2
------------------------------------------------------
17. (Dãy các số 1) Cho một số nguyên n bất kỳ (0≤n≤10000), n không chia hết cho 2 và không chia hết cho 5. Hỏi có ít nhất bao nhiêu chữ số trong dãy các số 1 sao cho (dãy) số đó chia hết cho n

* Ideal idea: The idea behind using remainders to solve this problem is based on the concept of modular arithmetic.

When dividing a number `x` by `n`, the remainder represents the "leftover" after performing the division. For example, when dividing 17 by 5, we get a quotient of 3 and a remainder of 2.

In the given problem, we are looking for a repeating sequence of digits that is formed by dividing a number consisting of only ones (`111...1`) by `n`. The sequence ends when the remainder becomes zero, indicating that the number is divisible by `n`.

By observing the remainders at each step, we can detect repeating patterns. If we encounter a remainder that we have seen before, it means the sequence is repeating, and we can stop the loop.

Using an unordered set to store the remainders allows us to quickly check if a remainder has been seen before or not. If we find a repeated remainder, it implies that the sequence is repeating, and we can terminate the loop.

This approach eliminates the need to actually construct and compare the entire sequence, which can be computationally expensive for large numbers. Instead, we focus on identifying the repeating pattern by examining the remainders, making the algorithm more efficient.

#include <iostream>
#include <unordered_set>

using namespace std;

//Cach 1: Bat dau tu so 1 
//````````Tien hanh kiem tra xe chia het cho n thi thoat
//tra ve so so 1;

int count(int n)
{
    int x = 1;
    int c = 1;
    while(x%n != 0)
    {
        x = x*10 + 1;
        c++;
    }
    
    return c;
}

//Cach 2:
int count1(int n)
{
    int x = 1;
    int c = 1;
    unordered_set<int> remainders;
    
    while(true)
    {
        int remainder = x % n;
        
        if (remainder == 0)
            return c;
        
        if (remainders.find(remainder) != remainders.end())
            return -1; // There is no repeating sequence
        
        remainders.insert(remainder);
        x = remainder * 10 + 1;
        c++;
    }
    
    return -1;
}

int main()
{
    int n;
    cout << "Nhap so n: ";
    cin >> n;
    
    cout << count1(n);

    return 0;
}
---------------------------------------------------

